{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PL/SQL Interview Guide","text":"<p>This guide covers SQL, PL/SQL, and Interview Questions. Click below to start exploring \ud83d\udc47</p>"},{"location":"#sections","title":"\ud83d\udcd6 Sections","text":"<ul> <li>Introduction</li> <li>SQL Interview Questions</li> <li>PL/SQL Basics</li> </ul> <p>\ud83d\udca1 Tip: Use the navigation bar at the top for quick access to all topics.</p>"},{"location":"#deploy-to-gh-pages-branch","title":"Deploy to gh-pages branch","text":"<p>mkdocs gh-deploy</p>"},{"location":"Interview/1.Introduction/","title":"Introduction","text":"<p>Hi, I am __, working as a PL/SQL Developer with around 4 years of experience in SQL and PL/SQL development using Oracle 12c/19c. I have worked on development, enhancement, and support projects in domains like Banking, Retail, and Sales.  </p> <p>My expertise includes: - Writing complex SQL queries, stored procedures, functions, packages, and triggers. - SQL performance tuning, exception handling, bulk operations, and data loading using SQL*Loader. - Data modeling (Star and Snowflake schema). - BI reporting tools like QlikView and BI Publisher. - Working in Agile methodology.  </p> <p>I am also involved in client interactions for requirement gathering, effort estimation, and providing regular updates.  </p>"},{"location":"Interview/1.Introduction/#day-to-day-activities-story-style","title":"Day-to-Day Activities (Story Style)","text":"<p>In my project, my day usually starts with a stand-up meeting where I update the team on my progress and plan the day\u2019s work. After that, I check tickets and production logs to see if any jobs or procedures have failed.  </p> <p>Most of my time goes into developing and enhancing PL/SQL objects like procedures, functions, packages, and triggers to meet business requirements. I also work on data loading using SQL*Loader and design database objects such as tables and views when needed.  </p> <p>Alongside development, I spend time testing and debugging the code, optimizing queries for better performance, and fixing any production issues reported by users. I also interact with business analysts and clients to clarify requirements and provide effort estimates.  </p> <p>By the end of the day, I update the task tracker, document the changes, and share my status with the team.  </p>"},{"location":"Interview/2.sql/","title":"Oracle SQL Concepts Organized by Categories","text":""},{"location":"Interview/2.sql/#fundamentals","title":"FUNDAMENTALS","text":"Concept Definition SQL (Structured Query Language) Standard language for accessing and manipulating relational databases, with Oracle-specific extensions. DDL (Data Definition Language) SQL commands that define database structure: CREATE, ALTER, DROP, TRUNCATE, COMMENT, RENAME. DML (Data Manipulation Language) SQL commands that manipulate data: INSERT, UPDATE, DELETE, SELECT, MERGE. DCL (Data Control Language) SQL commands that control access: GRANT, REVOKE. TCL (Transaction Control Language) SQL commands that manage transactions: COMMIT, ROLLBACK, SAVEPOINT. Schema Logical container that owns database objects like tables, views, indexes, etc. Database Object Any structure stored in the database like tables, views, indexes, sequences, synonyms, etc."},{"location":"Interview/2.sql/#data-types","title":"DATA TYPES","text":"Concept Definition VARCHAR2 Variable-length character string datatype, most commonly used string type in Oracle. CHAR Fixed-length character string datatype that pads with spaces. NUMBER Numeric datatype that can store integers and floating-point numbers with specified precision and scale. DATE Datatype for storing date and time information (century to second precision). TIMESTAMP Enhanced date datatype with fractional seconds precision and optional timezone information. CLOB Character Large Object for storing large amounts of character data (up to 4GB). BLOB Binary Large Object for storing large amounts of binary data (up to 4GB). NCHAR/NVARCHAR2 National character datatypes supporting Unicode character sets. RAW Datatype for storing binary data in hexadecimal format. ROWID Pseudo-datatype containing the physical address of a row in the database. XMLType Datatype specifically designed for storing and manipulating XML data."},{"location":"Interview/2.sql/#tables-and-constraints","title":"TABLES AND CONSTRAINTS","text":"Concept Definition Table Basic storage unit in Oracle database consisting of rows and columns. Primary Key Constraint that uniquely identifies each row in a table, cannot be NULL. Foreign Key Constraint that establishes referential integrity between tables. Unique Constraint Constraint that ensures all values in a column or combination of columns are unique. Check Constraint Constraint that validates data based on specified conditions before insertion/update. NOT NULL Constraint Constraint that prevents NULL values from being stored in a column. Default Value Value automatically assigned to a column when no value is explicitly provided. Temporary Table Table that stores data temporarily, either for session or transaction duration. External Table Table structure that allows querying external files as if they were database tables. Partitioned Table Table divided into smaller, manageable segments based on column values."},{"location":"Interview/2.sql/#basic-sql-operations","title":"BASIC SQL OPERATIONS","text":"Concept Definition SELECT DML command used to retrieve data from one or more tables. INSERT DML command used to add new rows to a table. UPDATE DML command used to modify existing rows in a table. DELETE DML command used to remove rows from a table. MERGE DML command that combines INSERT, UPDATE, and DELETE operations in a single statement. WHERE Clause Clause used to filter rows based on specified conditions. ORDER BY Clause used to sort query results in ascending or descending order. GROUP BY Clause used to group rows with similar values for aggregate functions. HAVING Clause used to filter groups created by GROUP BY based on aggregate conditions. DISTINCT Keyword used to eliminate duplicate rows from query results."},{"location":"Interview/2.sql/#joins","title":"JOINS","text":"Concept Definition Inner Join Returns rows that have matching values in both tables being joined. Left Outer Join Returns all rows from the left table and matched rows from the right table. Right Outer Join Returns all rows from the right table and matched rows from the left table. Full Outer Join Returns all rows from both tables, including unmatched rows. Cross Join Returns the Cartesian product of two tables (all possible combinations). Self Join Join operation where a table is joined with itself. Natural Join Join that automatically joins tables based on columns with the same name and datatype. Join Condition Condition that specifies how tables are related in a join operation. Equijoin Join based on equality comparison between columns from different tables. Non-Equijoin Join based on non-equality conditions like greater than, less than, etc."},{"location":"Interview/2.sql/#functions","title":"FUNCTIONS","text":"Concept Definition Single-Row Functions Functions that operate on individual rows and return one result per row. Aggregate Functions Functions that operate on groups of rows and return a single result per group. Character Functions Functions that manipulate character data: UPPER, LOWER, SUBSTR, LENGTH, TRIM, etc. Number Functions Functions that perform mathematical operations: ROUND, TRUNC, ABS, MOD, POWER, etc. Date Functions Functions that manipulate date data: SYSDATE, ADD_MONTHS, MONTHS_BETWEEN, TRUNC, etc. Conversion Functions Functions that convert data from one type to another: TO_CHAR, TO_NUMBER, TO_DATE, etc. NULL Functions Functions that handle NULL values: NVL, NVL2, NULLIF, COALESCE. Analytical Functions Functions that perform calculations across related rows: ROW_NUMBER, RANK, LAG, LEAD, etc. Regular Expression Functions Functions for pattern matching: REGEXP_LIKE, REGEXP_REPLACE, REGEXP_SUBSTR, etc."},{"location":"Interview/2.sql/#subqueries","title":"SUBQUERIES","text":"Concept Definition Subquery Query nested inside another SQL statement, also called inner query or nested query. Scalar Subquery Subquery that returns exactly one row and one column. Multi-row Subquery Subquery that returns multiple rows but single column. Multi-column Subquery Subquery that returns multiple columns and potentially multiple rows. Correlated Subquery Subquery that references columns from the outer query. Non-correlated Subquery Subquery that can be executed independently of the outer query. EXISTS Operator used to test whether a subquery returns any rows. IN/NOT IN Operators used to test whether a value matches any value in a subquery result. ANY/SOME Operators used to compare a value with any value returned by a subquery. ALL Operator used to compare a value with all values returned by a subquery."},{"location":"Interview/2.sql/#indexes","title":"INDEXES","text":"Concept Definition Index Database object that improves query performance by providing faster data access paths. B-tree Index Most common index type that organizes data in a balanced tree structure. Bitmap Index Index type suitable for columns with low cardinality and data warehouse environments. Unique Index Index that ensures uniqueness of indexed column values. Composite Index Index created on multiple columns of a table. Function-based Index Index created on the result of a function or expression rather than column values. Partial Index Index created on a subset of rows based on a WHERE condition. Reverse Key Index B-tree index where key values are stored in reverse to reduce contention. Index Organized Table (IOT) Table where data is stored in the index structure itself. Invisible Index Index that exists but is ignored by the optimizer unless specifically requested."},{"location":"Interview/2.sql/#views","title":"VIEWS","text":"Concept Definition View Virtual table based on the result of a SQL query, doesn't store data physically. Simple View View based on a single table without complex operations like joins or functions. Complex View View based on multiple tables or containing functions, expressions, or GROUP BY. Updatable View View that allows INSERT, UPDATE, DELETE operations under certain conditions. Materialized View Physical copy of view data stored in the database for performance improvement. Materialized View Log Table that tracks changes to base tables for fast refresh of materialized views. Refresh Methods Techniques for updating materialized views: FAST, COMPLETE, FORCE refresh. View Constraints Constraints that can be defined on views for data validation and integrity."},{"location":"Interview/2.sql/#sequences","title":"SEQUENCES","text":"Concept Definition Sequence Database object that generates unique numeric values automatically. NEXTVAL Pseudo-column that returns the next value from a sequence. CURRVAL Pseudo-column that returns the current value from a sequence in the session. START WITH Parameter that specifies the first value generated by a sequence. INCREMENT BY Parameter that specifies the interval between sequence numbers. MAXVALUE/MINVALUE Parameters that specify the maximum and minimum values for a sequence. CYCLE/NOCYCLE Parameter that determines whether sequence values restart after reaching limits. CACHE/NOCACHE Parameter that controls whether sequence values are pre-allocated in memory."},{"location":"Interview/2.sql/#synonyms","title":"SYNONYMS","text":"Concept Definition Synonym Alternative name for database objects like tables, views, sequences, etc. Private Synonym Synonym accessible only to the user who created it. Public Synonym Synonym accessible to all database users. Schema Qualification Specifying the schema name along with object name to avoid ambiguity."},{"location":"Interview/2.sql/#transactions","title":"TRANSACTIONS","text":"Concept Definition Transaction Logical unit of work consisting of one or more SQL statements that succeed or fail as a group. ACID Properties Atomicity, Consistency, Isolation, Durability - fundamental properties of database transactions. COMMIT Command that makes all changes in the current transaction permanent. ROLLBACK Command that undoes all changes made in the current transaction. SAVEPOINT Named point within a transaction to which you can rollback without affecting the entire transaction. Autocommit Feature that automatically commits each SQL statement individually. Read Consistency Oracle's guarantee that queries see a consistent view of data as of query start time. Isolation Levels Different levels of transaction isolation: READ COMMITTED, SERIALIZABLE, READ ONLY."},{"location":"Interview/2.sql/#locks-and-concurrency","title":"LOCKS AND CONCURRENCY","text":"Concept Definition Lock Mechanism to prevent concurrent access conflicts when multiple users access the same data. Row-level Locking Oracle's default locking mechanism that locks only the affected rows. Table Lock Lock that affects an entire table, can be shared or exclusive. Deadlock Situation where two or more transactions wait for each other to release locks. Lock Escalation Process where multiple row locks are converted to table locks (rare in Oracle). SELECT FOR UPDATE Statement that locks selected rows to prevent other users from modifying them. NOWAIT Option that returns immediately if requested locks cannot be obtained. Lock Timeout Feature that automatically releases locks after a specified time period."},{"location":"Interview/2.sql/#performance-optimization","title":"PERFORMANCE OPTIMIZATION","text":"Concept Definition Query Optimizer Component that determines the most efficient execution plan for SQL statements. Cost-Based Optimizer (CBO) Optimizer that uses statistics to calculate the cost of different execution plans. Execution Plan Step-by-step instructions that Oracle follows to execute a SQL statement. Explain Plan Command used to display the execution plan without actually running the query. Hints Directives that provide the optimizer with additional information about how to execute a statement. Table Statistics Information about table data distribution used by the optimizer. Histogram Detailed statistics about data distribution in columns with skewed values. Cardinality Estimated number of rows that a query or operation will return. Selectivity Fraction of rows that satisfy a particular condition. Access Path Method used to retrieve data from tables (full table scan, index scan, etc.)."},{"location":"Interview/2.sql/#analytical-functions","title":"ANALYTICAL FUNCTIONS","text":"Concept Definition Window Functions Functions that perform calculations across related rows without collapsing the result set. PARTITION BY Clause that divides result set into partitions for window function calculations. ORDER BY (in window) Clause that specifies the order of rows within each partition for window functions. ROW_NUMBER() Function that assigns unique sequential numbers to rows within partitions. RANK()/DENSE_RANK() Functions that assign ranking values to rows, handling ties differently. LAG/LEAD Functions that access data from previous or following rows within the same result set. FIRST_VALUE/LAST_VALUE Functions that return the first or last value within a window frame. Running Totals Cumulative calculations performed using window functions with appropriate frames. Moving Averages Calculations that average values over a sliding window of rows."},{"location":"Interview/2.sql/#hierarchical-queries","title":"HIERARCHICAL QUERIES","text":"Concept Definition CONNECT BY Oracle-specific clause for querying hierarchical data structures. START WITH Clause that specifies the root rows for hierarchical queries. PRIOR Operator used in CONNECT BY to reference parent row columns. LEVEL Pseudo-column that indicates the depth level in a hierarchy. SYS_CONNECT_BY_PATH Function that returns the path from root to current row in hierarchical queries. CONNECT_BY_ROOT Operator that returns the root value for the current row in a hierarchy. NOCYCLE Parameter that prevents infinite loops in hierarchical queries."},{"location":"Interview/2.sql/#set-operations","title":"SET OPERATIONS","text":"Concept Definition UNION Set operation that combines results from two queries, eliminating duplicates. UNION ALL Set operation that combines results from two queries, including duplicates. INTERSECT Set operation that returns rows common to both queries. MINUS Set operation that returns rows from the first query that are not in the second query."},{"location":"Interview/2.sql/#advanced-sql-features","title":"ADVANCED SQL FEATURES","text":"Concept Definition Common Table Expression (CTE) WITH clause that defines temporary result sets that can be referenced within a query. Recursive CTE CTE that references itself to process hierarchical or recursive data. CASE Expression Conditional logic that returns different values based on specified conditions. DECODE Function Oracle-specific function that provides if-then-else logic within SQL statements. PIVOT/UNPIVOT Operations that rotate rows to columns and vice versa for data presentation. Model Clause Advanced feature for performing complex calculations and what-if analysis. Flashback Query Feature that allows querying historical data as it existed at a specific point in time. Row Pattern Recognition Advanced feature for pattern matching in sequential data using MATCH_RECOGNIZE."},{"location":"Interview/2.sql/#json-support","title":"JSON SUPPORT","text":"Concept Definition JSON Datatype Native datatype for storing JSON documents with validation and optimization. JSON_VALUE Function for extracting scalar values from JSON data. JSON_QUERY Function for extracting JSON objects or arrays from JSON data. JSON_TABLE Function that converts JSON data into relational rows and columns. JSON_EXISTS Function that tests whether JSON data contains specific paths or values. JSON Path Expression Syntax for navigating and extracting data from JSON documents."},{"location":"Interview/2.sql/#security","title":"SECURITY","text":"Concept Definition Privileges Rights granted to users to perform specific operations on database objects. System Privileges Rights to perform system-level operations like CREATE TABLE, DROP USER, etc. Object Privileges Rights to perform operations on specific database objects like SELECT, INSERT, UPDATE. Roles Named groups of privileges that can be granted to users or other roles. Public Role Special role that is automatically granted to all database users. Grant Command used to give privileges to users or roles. Revoke Command used to remove privileges from users or roles. WITH GRANT OPTION Option that allows the grantee to grant the same privilege to other users."},{"location":"Interview/2.sql/#backup-and-recovery","title":"BACKUP AND RECOVERY","text":"Concept Definition Logical Backup Backup that exports database objects and data in a logical format (Data Pump). Physical Backup Backup that copies actual database files (datafiles, control files, redo logs). Export/Import Utilities for creating logical backups and restoring data (expdp/impdp). Data Pump Advanced export/import technology for high-performance data movement. Flashback Technology that allows recovery of data to a previous point in time. Point-in-Time Recovery Ability to restore database to a specific moment in the past."},{"location":"Interview/2.sql/#data-warehouse-features","title":"DATA WAREHOUSE FEATURES","text":"Concept Definition Star Schema Data warehouse design with fact tables connected to dimension tables. Dimension Tables Tables containing descriptive attributes for analysis. Fact Tables Tables containing measurable business metrics and foreign keys to dimensions. Data Aggregation Process of summarizing detailed data for analytical purposes. OLAP Functions Specialized functions for online analytical processing and business intelligence. Partitioning Technique for dividing large tables into smaller, manageable pieces."},{"location":"Interview/3.plsql/","title":"PL/SQL Concepts Organized by Categories","text":""},{"location":"Interview/3.plsql/#fundamentals","title":"FUNDAMENTALS","text":"Concept Definition PL/SQL Procedural Language extension to SQL developed by Oracle. Combines SQL with procedural programming features like loops, conditions, and exception handling. Block Structure Basic unit of PL/SQL code consisting of DECLARE (optional), BEGIN (mandatory), EXCEPTION (optional), and END (mandatory) sections. Scope Visibility and accessibility of variables and other identifiers within different parts of the program. Lexical Scoping Rule that determines variable visibility based on where variables are declared in nested blocks. Label Named point in the code that can be referenced by GOTO statements or to name loops."},{"location":"Interview/3.plsql/#variables-and-datatypes","title":"VARIABLES AND DATATYPES","text":"Concept Definition Variable Named storage location that can hold data values. Must be declared with a specific datatype before use. Constant A variable whose value cannot be changed once assigned. Declared using the CONSTANT keyword. Datatype Defines the type of data that can be stored in a variable (NUMBER, VARCHAR2, DATE, BOOLEAN, etc.). %TYPE Attribute that allows a variable to inherit the datatype of a database column or another variable. %ROWTYPE Attribute that allows a variable to store an entire row from a table or cursor with the same structure. Record Composite datatype that groups related data items together, similar to a row in a table."},{"location":"Interview/3.plsql/#cursors","title":"CURSORS","text":"Concept Definition Cursor Pointer to a context area that holds the result set of a SQL query. Allows row-by-row processing of query results. Implicit Cursor Automatically created cursor for SQL DML statements (INSERT, UPDATE, DELETE, SELECT INTO). Explicit Cursor User-defined cursor that must be declared, opened, fetched from, and closed manually. Cursor Attributes Properties of cursors like %FOUND, %NOTFOUND, %ROWCOUNT, %ISOPEN that provide information about cursor status. FOR Loop Cursor Simplified way to process cursor data using FOR loop syntax that automatically handles cursor operations. SQL% Implicit cursor attributes that provide information about the last SQL statement executed. Ref Cursor Cursor variable that can point to different result sets at runtime."},{"location":"Interview/3.plsql/#control-structures","title":"CONTROL STRUCTURES","text":"Concept Definition Conditional Logic Control structures like IF-THEN-ELSE and CASE statements that execute code based on conditions. Loop Control structure that repeats a block of code. Types include LOOP, WHILE, and FOR loops. GOTO Statement that transfers control to a labeled statement, though generally discouraged."},{"location":"Interview/3.plsql/#exception-handling","title":"EXCEPTION HANDLING","text":"Concept Definition Exception Runtime error that occurs during program execution. Can be predefined, user-defined, or pragma exceptions. Exception Handling Mechanism to catch and handle errors using EXCEPTION block with WHEN clauses. Predefined Exception Built-in exceptions like NO_DATA_FOUND, TOO_MANY_ROWS, ZERO_DIVIDE provided by Oracle. User-defined Exception Custom exceptions declared by the programmer using EXCEPTION datatype. RAISE Statement used to explicitly raise an exception in the program."},{"location":"Interview/3.plsql/#subprograms","title":"SUBPROGRAMS","text":"Concept Definition Procedure Named PL/SQL block that performs specific tasks. Can accept parameters and be called from other programs. Function Named PL/SQL block that performs calculations and returns a single value. Must have a RETURN statement. Parameter Variable used to pass values into or out of procedures and functions. Can be IN, OUT, or IN OUT. Overloading Feature that allows multiple subprograms with the same name but different parameter signatures. Forward Declaration Declaration of a subprogram before its actual definition, used to resolve mutual dependencies. Recursion Programming technique where a subprogram calls itself to solve a problem."},{"location":"Interview/3.plsql/#packages","title":"PACKAGES","text":"Concept Definition Package Container that groups related procedures, functions, variables, and other constructs together. Package Specification Public interface of a package that declares what can be accessed from outside the package. Package Body Implementation of the package that contains the actual code for procedures and functions."},{"location":"Interview/3.plsql/#triggers","title":"TRIGGERS","text":"Concept Definition Trigger Special PL/SQL block that automatically executes in response to specific database events. DML Trigger Trigger that fires in response to DML operations (INSERT, UPDATE, DELETE) on a table. DDL Trigger Trigger that fires in response to DDL operations (CREATE, ALTER, DROP) on database objects. System Trigger Trigger that fires in response to database system events like startup, shutdown, or logon. OLD and NEW Correlation names used in DML triggers to reference old and new values of columns. Mutating Table Table that is being modified by a DML statement when a trigger tries to query or modify it."},{"location":"Interview/3.plsql/#collections","title":"COLLECTIONS","text":"Concept Definition Collection Ordered group of elements of the same datatype. Types include VARRAY, Nested Table, and Associative Array. VARRAY Variable-size array with a maximum limit on the number of elements. Nested Table Unbounded, ordered collection of elements that can be stored in database tables. Associative Array Index-by table that uses string or integer indexes to access elements."},{"location":"Interview/3.plsql/#bulk-operations","title":"BULK OPERATIONS","text":"Concept Definition Bulk Collect Feature that allows fetching multiple rows at once from a cursor into a collection, improving performance. FORALL Statement that performs bulk DML operations on collections, processing multiple rows efficiently."},{"location":"Interview/3.plsql/#transaction-control","title":"TRANSACTION CONTROL","text":"Concept Definition Commit Statement that makes all changes in the current transaction permanent. Rollback Statement that undoes all changes made in the current transaction. Savepoint Named point in a transaction to which you can roll back without rolling back the entire transaction. PRAGMA AUTONOMOUS_TRANSACTION Directive that makes a subprogram execute in its own independent transaction."},{"location":"Interview/3.plsql/#dynamic-sql","title":"DYNAMIC SQL","text":"Concept Definition Dynamic SQL SQL statements that are constructed and executed at runtime using EXECUTE IMMEDIATE or DBMS_SQL."},{"location":"Interview/3.plsql/#performance-and-optimization","title":"PERFORMANCE AND OPTIMIZATION","text":"Concept Definition Pipelined Function Function that returns rows as they are produced rather than building the entire result set first. Deterministic Function Function that always returns the same result for the same input parameters. Parallel Enable Hint that allows a function to be executed in parallel during query processing."},{"location":"Interview/3.plsql/#compilation-and-dependencies","title":"COMPILATION AND DEPENDENCIES","text":"Concept Definition Compilation Process of translating PL/SQL source code into executable bytecode stored in the database. Native Compilation Feature that compiles PL/SQL code to native machine code for better performance. Dependency Relationship between database objects where one object references another. Invalidation Process where dependent objects become invalid when referenced objects are modified."},{"location":"Interview/3.plsql/#performance-tuning","title":"PERFORMANCE TUNING","text":"Concept Definition Execution Plan Detailed steps that Oracle follows to execute a SQL statement, showing access paths and join methods. Cost-Based Optimizer (CBO) Oracle's optimizer that chooses execution plans based on statistics and cost calculations. Table Statistics Metadata about table data distribution used by the optimizer to choose optimal execution plans. Index Hints Optimizer hints like /+ INDEX / that suggest specific indexes to use for query execution. Explain Plan Command used to view the execution plan of a SQL statement without actually executing it. TKPROF Oracle utility that formats and analyzes SQL trace files to identify performance bottlenecks. Autotrace SQL*Plus feature that displays execution plans and statistics after running SQL statements. V$SESSION_WAIT Dynamic view that shows what each session is currently waiting for, useful for performance diagnosis. AWR (Automatic Workload Repository) Oracle feature that automatically captures and stores performance statistics for analysis. ADDM (Automatic Database Diagnostic Monitor) Oracle tool that analyzes AWR data and provides performance recommendations. SQL Tuning Advisor Oracle tool that analyzes SQL statements and recommends performance improvements. Index Usage Monitoring Feature to track whether indexes are being used to identify unused indexes for removal. Partition Pruning Optimization technique where Oracle eliminates unnecessary partitions during query execution. Parallel Execution Feature that allows SQL operations to be executed using multiple parallel processes for better performance."},{"location":"Interview/3.plsql/#security-and-privileges","title":"SECURITY AND PRIVILEGES","text":"Concept Definition AUTHID Clause that specifies whether a subprogram executes with definer's or invoker's privileges. DEFINER Rights Default privilege model where subprograms execute with the privileges of the owner. INVOKER Rights Privilege model where subprograms execute with the privileges of the calling user."},{"location":"Interview/3.plsql/#design-patterns-and-best-practices","title":"DESIGN PATTERNS AND BEST PRACTICES","text":"Concept Definition Code Organization Best practices for structuring PL/SQL code including naming conventions and modularization. Error Logging Framework Systematic approach to logging errors and debug information in PL/SQL applications. Configuration Management Techniques for managing application settings and configuration parameters. Code Review Standards Guidelines and checklists for reviewing PL/SQL code quality and maintainability. Testing Strategies Approaches for unit testing, integration testing, and debugging PL/SQL code. Documentation Standards Best practices for documenting PL/SQL code including comments and specifications."},{"location":"Interview/3.plsql/#pragma-directives","title":"PRAGMA DIRECTIVES","text":"Concept Definition PRAGMA Compiler directive that provides instructions to the PL/SQL compiler. PRAGMA SERIALLY_REUSABLE Directive that makes package variables reset to initial values after each use."}]}